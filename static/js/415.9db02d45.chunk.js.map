{"version":3,"file":"static/js/415.9db02d45.chunk.js","mappings":"uNAGaA,EAAOC,EAAAA,EAAAA,GAAH,uIAQJC,EAAYD,EAAAA,EAAAA,GAAH,2NAUTE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,mPAgBTI,EAAWJ,EAAAA,EAAAA,IAAH,kHAORK,EAAYL,EAAAA,EAAAA,EAAH,8I,SCvBtB,EAlBkB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,YAA7B,OACV,SAACZ,EAAD,WACE,UAACC,EAAD,CAAWY,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAA/C,WACE,SAACH,EAAD,CAAUa,IAPD,mCAOiBC,OAAOL,GAAcM,IAAI,MACnD,SAACd,EAAD,iBAAYM,QAAZ,IAAYA,EAAAA,EAASC,QAHTF,EADN,KAUjB,C,8ECAD,UAdA,WACC,OAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KAMC,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAoBC,KAAKH,EAC1B,GAAE,KAGD,+BACE,SAAC,IAAD,CAAWf,OAAQA,KAGxB,C,sBCjBD,SAASmB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOV,KAAKK,EAAOC,EAEvC,CACe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GACzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CACAhB,OAAMiB,EACR,GACF,CACF,C,uJC7BMC,EAAM,+BACNC,EAAW,mCAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,2GAA0BC,EAA1B,+BAAgC,GAAIC,EAApC,+BAA6C,CAAC,EAA9C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMlB,QAAQT,OACN,IAAI4B,MAAM,kDALlB,2GASO,SAASjC,EAAkBkC,GAChC,OAAOR,EAAW,GAAD,OACZF,EADY,uCACsBC,EADtB,iBACuCS,GAEzD,CAEM,SAASC,EAAaC,GAC3B,OAAOV,EAAW,GAAD,OACZF,EADY,iCACgBC,EADhB,kBACkCW,GAEpD,CAEM,SAASC,EAAgBC,GAC9B,OAAOZ,EAAW,GAAD,OAAIF,EAAJ,kBAAiBc,EAAjB,oBAAoCb,GACtD,CAEM,SAASc,EAAgBD,GAC9B,OAAOZ,EAAW,GAAD,OAAIF,EAAJ,kBAAiBc,EAAjB,4BAA4Cb,GAC9D,CAEM,SAASe,EAAgBF,EAASJ,GACvC,OAAOR,EAAW,GAAD,OACZF,EADY,kBACCc,EADD,4BAC4Bb,EAD5B,iBAC6CS,GAE/D,C","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const MovieItem = styled.li`\n  flex-basis: calc((100% - 100px) / 5);\n  max-height: 100%;\n  min-height: 390px;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: var(--bg);\n  box-shadow: var(--main-shadow);\n`;\n\nexport const MovieLink = styled(Link)`\n  object-fit: cover;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n\n  &:hover img {\n    filter: grayscale(0);\n  }\n\n  &:hover p {\n    color: var(--accent);\n  }\n`;\n\nexport const MovieImg = styled.img`\n  margin-bottom: 5px;\n  filter: grayscale(0.4);\n\n  transition: all 200ms ease-in-out;\n`;\n\nexport const MovieName = styled.p`\n  height: 100%;\n  padding: 10px 8px;\n  font-weight: 500;\n  font-size: 18px;\n  transition: all 200ms ease-in-out;\n`;","import { useLocation } from 'react-router-dom';\nimport {List, MovieItem, MovieLink, MovieImg, MovieName} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <List>\n      {movies.map(({ id, title, original_name, poster_path }) => (\n        <MovieItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            <MovieImg src={imgBaseUrl.concat(poster_path)} alt=\"\" />\n            <MovieName>{title ?? original_name}</MovieName>\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </List>\n  );\n};\n\nexport default MovieList;","import { useState, useEffect } from 'react';\nimport { getTrendingMovies } from '../services/API';\nimport MovieList from 'components/MovieList/MovieList';\n\n\nfunction Home() {\n const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies().then(setMovies);\n  }, []);\n\n  return (\n    <>\n      <MovieList movies={movies} />\n    </>\n  );\n}\n\nexport default Home;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","const URL = 'https://api.themoviedb.org/3';\nconst BASE_KEY = '4c022d061e1dc709d01d1f05bf0b4752';\n\nasync function apiService(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(\n        new Error('The resource you requested could not be found'),\n      );\n}\n\nexport function getTrendingMovies(page) {\n  return apiService(\n    `${URL}/trending/movie/day?api_key=${BASE_KEY}&page=${page}`,\n  );\n}\n\nexport function searchMovies(query) {\n  return apiService(\n    `${URL}/search/movie?api_key=${BASE_KEY}&query=${query}`,\n  );\n}\n\nexport function getMovieDetails(movieId) {\n  return apiService(`${URL}/movie/${movieId}?api_key=${BASE_KEY}`);\n}\n\nexport function getMovieCredits(movieId) {\n  return apiService(`${URL}/movie/${movieId}/credits?api_key=${BASE_KEY}`);\n}\n\nexport function getMovieReviews(movieId, page) {\n  return apiService(\n    `${URL}/movie/${movieId}/reviews?api_key=${BASE_KEY}&page=${page}`,\n  );\n}"],"names":["List","styled","MovieItem","MovieLink","Link","MovieImg","MovieName","movies","location","useLocation","map","id","title","original_name","poster_path","to","state","from","src","concat","alt","useState","setMovies","useEffect","getTrendingMovies","then","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","URL","BASE_KEY","apiService","url","config","fetch","response","ok","json","Error","page","searchMovies","query","getMovieDetails","movieId","getMovieCredits","getMovieReviews"],"sourceRoot":""}